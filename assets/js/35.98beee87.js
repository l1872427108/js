(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{430:function(t,s,a){"use strict";a.r(s);var r=a(56),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("js 是一种基于原型的语言，每个对象拥有一个原型对象，对象从原型继承方法和属性。原型对象也可以能拥有原型，并从中继承方法和属性，一层一层，最终构成了原型链。")]),t._v(" "),a("p",[t._v("注意：OOP中，首先定义类，此后创建对象实例，类中定义的所有属性和方法都被复制到实例中。而 js 中是通过在实例和它的构造器之间建立一个链接。")]),t._v(" "),a("h3",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),a("p",[t._v("每一个函数都有一个属于自己的 prototype 属性，它指向一个对象，而这个对象就是实例的原型。\n"),a("img",{attrs:{src:"/js/原型1.png",width:"700",height:"200"}})]),t._v(" "),a("p",[t._v('原型就是每一个 js 对象在创建的时候与之关联的一个对象。每一个对象都会从原型"继承"属性。所以继承的属性都源自 prototype 属性之上的。prototype 属性的值是一个对象。原型链下游的对象继承的属性和方法，都存在其中。')]),t._v(" "),a("h3",{attrs:{id:"prototype-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype-2"}},[t._v("#")]),t._v(" [[Prototype]]")]),t._v(" "),a("p",[t._v("对象都有一个特殊的隐藏属性 [[Prototype]], 它要么是 null，要么就是另一个对象的引用，该对象被称为原型。")]),t._v(" "),a("p",[t._v("[[Prototype]] 是内部的而且是隐藏的，但是浏览器给我提供了访问它的方法。")]),t._v(" "),a("h3",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),a("strong",[t._v("proto")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nuser2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("允许我们从 user2 中读取一个它没有的属性. js 会去 user1 去寻找.\n"),a("img",{attrs:{src:"/js/原型2.png",width:"700",height:"200"}})]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("引用不能形成闭环。")]),t._v(" "),a("li",[a("strong",[t._v("proto")]),t._v(" 的值可以是对象，也可以是 null， 其他类型会被忽略。")])]),t._v(" "),a("h3",{attrs:{id:"proto-和-prototype-的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto-和-prototype-的关系"}},[t._v("#")]),t._v(" "),a("strong",[t._v("proto")]),t._v(" 和 [[Prototype]] 的关系")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("二者是不一样的，"),a("strong",[t._v("proto")]),t._v(" 是 [[Prototype]] 的历史原因留下来的 getter/setter.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("proto")]),t._v(" 属性有点过时，它的存在是历史的原因，我们现在应该使用的是 Object.getPrototypeOf 和 Object.setPropertyPf 来取代 "),a("strong",[t._v("proto")]),t._v(" 的 getter/setter.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("proto")]),t._v(" 受到浏览器环境的限制，但是几乎所有的环境都支持他。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("proto")]),t._v(" 感官上更加强烈。")])])]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("p",[t._v("每一个原型都有一个 constructor 属性指向关联的构造函数。每个实例都从原型中继承了一个 constructor 属性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("可以创建新的实例\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("获取对象实例的构造器的名字\nperson1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"原型链-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链-2"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("前面说过，实例的原型也是一个对象，既然是对象，一开始说过，每一个对象在创建的时候都有一个与之关联的原型对象.")]),t._v(" "),a("img",{attrs:{src:"/js/原型3.png",width:"700",height:"500"}})])}),[],!1,null,null,null);s.default=n.exports}}]);