(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{454:function(a,t,s){"use strict";s.r(t);var i=s(56),r=Object(i.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"async-await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[a._v("#")]),a._v(" async await")]),a._v(" "),s("p",[a._v("本质上是 Generator 的语法糖，它优化了 then 链式调用。")]),a._v(" "),s("p",[a._v("单一的 then 链体现不出来，如果多层回调问题，async/await就能进一步优化它。")]),a._v(" "),s("h3",{attrs:{id:"async"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[a._v("#")]),a._v(" async")]),a._v(" "),s("p",[a._v("async function async函数")]),a._v(" "),s("p",[a._v("async 的返回值是一个 promise 对象。")]),a._v(" "),s("p",[a._v("async 函数返回的 promise 的结果由函数执行的结果决定。")]),a._v(" "),s("h3",{attrs:{id:"await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#await"}},[a._v("#")]),a._v(" await")]),a._v(" "),s("p",[a._v("await expression  await表达式(一般都是一个 promise)")]),a._v(" "),s("p",[a._v("await 后面也可以是其他任意的表达式。 如果右侧不是 promise，得到的结果就是表达式的值, 就是它本身。")]),a._v(" "),s("p",[a._v("如果是 promise， 他会返回 promise 成功的值。")]),a._v(" "),s("h3",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[a._v("#")]),a._v(" 注意")]),a._v(" "),s("ol",[s("li",[a._v("await 必须写在 async 函数中, 但是 async 函数中可以没有 await。")]),a._v(" "),s("li",[a._v("如果 await 的 promise 失败了，就会抛出异常，需要通过 try..catch 来补货处理。")])]),a._v(" "),s("h3",{attrs:{id:"async-await-和-promise区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await-和-promise区别"}},[a._v("#")]),a._v(" async/await 和 promise区别")]),a._v(" "),s("ul",[s("li",[a._v("更加可读性。")]),a._v(" "),s("li",[a._v("promise传递中间值非常麻烦，async更加优雅。")]),a._v(" "),s("li",[a._v("错误处理友好。async/await 可以用成熟的 try/catch。")]),a._v(" "),s("li",[a._v("调试友好。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);