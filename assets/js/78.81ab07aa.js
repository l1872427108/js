(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{475:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"eval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval"}},[t._v("#")]),t._v(" eval")]),t._v(" "),s("p",[t._v("我们之前讲过 js 中的作用域采用的是词法作用域（在语言编译词法分析阶段）就会确定的。但这是不准备的，有一些方法可以骗过词法作用域。")]),t._v(" "),s("h3",{attrs:{id:"eval-参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-参数"}},[t._v("#")]),t._v(" eval 参数")]),t._v(" "),s("ol",[s("li",[t._v("eval 的参数是一个字符串，这个字符串可以是表达式（有返回值）,或者是一个语句或多个语句。")]),t._v(" "),s("li",[t._v("如果参数不是一个字符串，就会原封不断的返回。")])]),t._v(" "),s("h3",{attrs:{id:"eval-恶魔"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-恶魔"}},[t._v("#")]),t._v(" eval 恶魔")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("eval 的权限和调用者的权限是一样的，也就是说，一旦有人恶意的修改了 eval 的字符串，那么就可能注入 XSS 攻击，对用户的浏览器带来危害。")])]),t._v(" "),s("li",[s("p",[t._v("eval 在执行的时候才会调用 js 去解析器字符串, js 解析去将 js 转为机器代码。如果存在创建变量或者是修改了变量，eval 会强制浏览器去查找，更改变量会强制浏览器重新执行所有已经生产的机器代码。")])]),t._v(" "),s("li",[s("p",[t._v("对于 js 执行器来说，在编译的时候进行静态分析，会做很多的优化，很大一部分就是来自于在静态的分析代码，提前知道函数和变量声明在何处，但是一旦存在 eval，引擎也不会知道你到底会怎么做，这时候引擎不得不假设自己所标识的都是无效的，也就不会做优化。")])])]),t._v(" "),s("h3",{attrs:{id:"用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'var a = 1;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);