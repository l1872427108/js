(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{477:function(t,s,a){"use strict";a.r(s);var r=a(56),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),a("p",[t._v("js 中可执行的代码有哪几类呢？怎么的代码才算是符合规范的。")]),t._v(" "),a("ol",[a("li",[t._v("当 js 执行全局代码的时候，会编译全局代码并创建全局上下文，全局执行上下文是只有一个的。")]),t._v(" "),a("li",[t._v("当执行函数的时候，会编译函数中的代码，然后创建函数上下文，函数执行完成之后，上下文就会被销毁。")]),t._v(" "),a("li",[t._v("执行 eval 函数的时候，eval会被编译，并创建 eval 上下文。")])]),t._v(" "),a("h3",{attrs:{id:"执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),a("p",[t._v("我们写的函数那么多，是如何管理那么多执行上下文的呢？")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当执行之前，会先编译，创建全局上下文，压入执行栈中。\n"),a("img",{attrs:{width:"400",height:"400",src:"/js/执行栈1.png",alt:"内存图"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("执行 foo， js 引擎编译 foo 函数，并创建一个执行上下文，压入栈中。\n"),a("img",{attrs:{width:"400",height:"400",src:"/js/执行栈2.png",alt:"内存图"}})])]),t._v(" "),a("li",[a("p",[t._v("foo 执行完之后，弹出栈。\n"),a("img",{attrs:{width:"600",height:"400",src:"/js/执行栈3.png",alt:"内存图"}})])])]),t._v(" "),a("h3",{attrs:{id:"理解执行栈的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解执行栈的好处"}},[t._v("#")]),t._v(" 理解执行栈的好处")]),t._v(" "),a("p",[t._v("我们可以利用调用栈来追踪函数，我们可以分析调用栈跟踪哪个函数正在被执行和其他函数之间的关系。")]),t._v(" "),a("ol",[a("li",[t._v("我们可以利用浏览器来查看调用栈的信息。 用于调试")]),t._v(" "),a("li",[t._v("栈溢出。栈是有大小的，超出一定的数目，就会产生错误。 一般递归没有终止条件就会产生溢出。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);