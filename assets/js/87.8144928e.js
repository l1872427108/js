(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{484:function(s,t,a){"use strict";a.r(t);var n=a(56),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1-0-2-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3"}},[s._v("#")]),s._v(" 0.1 + 0.2 !== 0.3")]),s._v(" "),a("p",[s._v("0.1 + 0.2 == 0.3 乍一看没问题，那么计算机会认为是正确的吗? 0.1 + 0.2 = 0.3 吗？")]),s._v(" "),a("h3",{attrs:{id:"数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[s._v("#")]),s._v(" 数字")]),s._v(" "),a("p",[s._v("在 js 中整数和小数统称为浮点数，而不像 java 中区分整数和小数。 js ，采用存储浮点数采用的是 IEEE 754 双精度浮点数来存储数值。")]),s._v(" "),a("h3",{attrs:{id:"ieee-754-64位浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ieee-754-64位浮点数"}},[s._v("#")]),s._v(" IEEE 754 64位浮点数")]),s._v(" "),a("ul",[a("li",[s._v("第 1 位: 符号位， 0表示正数，1表示负数。")]),s._v(" "),a("li",[s._v("第 2 ~ 12 位，共11位，指数部分。")]),s._v(" "),a("li",[s._v("第 13 ~ 64 位，共52位，小数部分。")])]),s._v(" "),a("img",{attrs:{src:"/js/浮点数1.png",width:"800",height:"200"}}),s._v(" "),a("p",[s._v("越高的位置对数值的影响越大，所表示的精度就越不准确。")]),s._v(" "),a("h3",{attrs:{id:"隐含位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐含位置"}},[s._v("#")]),s._v(" 隐含位置")]),s._v(" "),a("p",[s._v("小数部分，用科学计数法表示之后，默认都是 1.xxx...xxxx 这种形式，所以小数部分会默认把 1 省略掉，不会保存在小数部分。")]),s._v(" "),a("h3",{attrs:{id:"指数部分。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指数部分。"}},[s._v("#")]),s._v(" 指数部分。")]),s._v(" "),a("p",[s._v("指数部分，最大值 2^11 (2047) , 它是一个无符号整数，范围为 [0, 2047], 但是科学计数法表示数据时是可以为负的，因此约定一个中间数 1023 表示为 0， 因此 [1, 1022] 表示负数, [1024, 2046] 为正。 0和2047被用作特殊数。")]),s._v(" "),a("h3",{attrs:{id:"表示-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表示-0-1"}},[s._v("#")]),s._v(" 表示 0.1")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 的二进制表示为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011.")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1100")]),s._v("循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n转成科学计数法为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.100110011001100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n指数部分 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1023")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1019")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 双浮点数存储结构：\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 满足条件\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1019")]),s._v(" 不满足条件，需要转为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" 位的二进制   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01111111011")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001100110011")]),s._v("循环"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" 不满足条件，需要转为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(" 位的二进制\n    要求 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v(" 为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(" 位，所以需要 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 舍 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 入\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001100110011001100110011001100110011001100110011010")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//共 52 位")]),s._v("\n    拼接 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEM")]),s._v(" 得到 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" 位双精度浮点数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011111110111001100110011001100110011001100110011001100110011010")]),s._v("\n\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("从上面转换后的"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("位浮点数，我们可以将它转回去，来验证是否是正确的 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1001100110011001100110011001100110011001100110011010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.60000000000000008881784197001E0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.625")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.100000000000000005551115123126")]),s._v("\n\n我们可以看出来，"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 在存储的时候是因为无限循环，已经做了一次舍去，导致精度已经不在准确，当我们将存储在内存中的 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 转会来，它已经就不再是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 本身了。\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("那么为什么我们使用 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 的时候，它还是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 呢？\n在 js 中，是把小数当作整数来看。\n在 js 中能够正确显示精度的数为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("小数部分 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(" 位 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 隐含的 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 位"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n所以最大能够表示的数字就是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9007199254740992.")]),s._v(" \n对应科学计数尾数是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.007199254740992")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 它的长度是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" 位有效数字。\n并且，js 在显示的时候会取到 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" 位的精度来表示。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.10000000000000000555")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1000000000000000")]),s._v("，去掉末尾的零后正好为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("\n\n所以我们看到的是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" ，但是它已经不是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 了。\n\n")])])]),a("h3",{attrs:{id:"表示-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表示-0-2"}},[s._v("#")]),s._v(" 表示 0.2")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" 的二进制为："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v("循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" 双浮点数存储结构：\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1020")]),s._v("，二进制为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01111111100")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001100110011001100110011001100110011001100110011010")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011111111001001100110011001100110011001100110011001100110011010")]),s._v("\n\n和上面一样，保存"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("位精度， 得到了 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("\n")])])]),a("h3",{attrs:{id:"_0-1-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2"}},[s._v("#")]),s._v(" 0.1 + 0.2")]),s._v(" "),a("p",[s._v("上面即使过程中 0.1 不再是 0.1 ，0.2 不再是 0.2 ，那么为什么 0.1 + 0.2 !== 0.3。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" 和 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" 都转化成二进制后再进行运算\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00011001100110011001100110011001100110011001100110011010")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0011001100110011001100110011001100110011001100110011010")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0100110011001100110011001100110011001100110011001100111")]),s._v("\n\n转化为 Double，即 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEM")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("：")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("二进制为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01111111101")]),s._v("\n    最后的 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" 被舍掉，并且进位\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011001100110011001100110011001100110011001100110100")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SEM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011111111010011001100110011001100110011001100110011001100110100")]),s._v("\n\n最终得到了 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.300000000000000004")]),s._v("\n注意：这里取得是 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" 位，而不是"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("位，是"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IEEE754")]),s._v("的规范中的计算结果。\n\n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("我们可以发现，0.1 在存储的时候产生了误差，0.2 在存储的时候产生了误差，0.1 + 0.2 二进制相加的时候也会产生误差。这一切，就会导致 0.1 + 0.2 !== 0.3")])])}),[],!1,null,null,null);t.default=r.exports}}]);